// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/saltbo/zpan/internal/app/entity"
)

func newUserStorage(db *gorm.DB, opts ...gen.DOOption) userStorage {
	_userStorage := userStorage{}

	_userStorage.userStorageDo.UseDB(db, opts...)
	_userStorage.userStorageDo.UseModel(&entity.UserStorage{})

	tableName := _userStorage.userStorageDo.TableName()
	_userStorage.ALL = field.NewAsterisk(tableName)
	_userStorage.Id = field.NewInt64(tableName, "id")
	_userStorage.Uid = field.NewInt64(tableName, "uid")
	_userStorage.Max = field.NewUint64(tableName, "max")
	_userStorage.Used = field.NewUint64(tableName, "used")
	_userStorage.Created = field.NewTime(tableName, "created")
	_userStorage.Updated = field.NewTime(tableName, "updated")
	_userStorage.Deleted = field.NewField(tableName, "deleted")

	_userStorage.fillFieldMap()

	return _userStorage
}

type userStorage struct {
	userStorageDo

	ALL     field.Asterisk
	Id      field.Int64
	Uid     field.Int64
	Max     field.Uint64
	Used    field.Uint64
	Created field.Time
	Updated field.Time
	Deleted field.Field

	fieldMap map[string]field.Expr
}

func (u userStorage) Table(newTableName string) *userStorage {
	u.userStorageDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userStorage) As(alias string) *userStorage {
	u.userStorageDo.DO = *(u.userStorageDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userStorage) updateTableName(table string) *userStorage {
	u.ALL = field.NewAsterisk(table)
	u.Id = field.NewInt64(table, "id")
	u.Uid = field.NewInt64(table, "uid")
	u.Max = field.NewUint64(table, "max")
	u.Used = field.NewUint64(table, "used")
	u.Created = field.NewTime(table, "created")
	u.Updated = field.NewTime(table, "updated")
	u.Deleted = field.NewField(table, "deleted")

	u.fillFieldMap()

	return u
}

func (u *userStorage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userStorage) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.Id
	u.fieldMap["uid"] = u.Uid
	u.fieldMap["max"] = u.Max
	u.fieldMap["used"] = u.Used
	u.fieldMap["created"] = u.Created
	u.fieldMap["updated"] = u.Updated
	u.fieldMap["deleted"] = u.Deleted
}

func (u userStorage) clone(db *gorm.DB) userStorage {
	u.userStorageDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userStorage) replaceDB(db *gorm.DB) userStorage {
	u.userStorageDo.ReplaceDB(db)
	return u
}

type userStorageDo struct{ gen.DO }

type IUserStorageDo interface {
	gen.SubQuery
	Debug() IUserStorageDo
	WithContext(ctx context.Context) IUserStorageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserStorageDo
	WriteDB() IUserStorageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserStorageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserStorageDo
	Not(conds ...gen.Condition) IUserStorageDo
	Or(conds ...gen.Condition) IUserStorageDo
	Select(conds ...field.Expr) IUserStorageDo
	Where(conds ...gen.Condition) IUserStorageDo
	Order(conds ...field.Expr) IUserStorageDo
	Distinct(cols ...field.Expr) IUserStorageDo
	Omit(cols ...field.Expr) IUserStorageDo
	Join(table schema.Tabler, on ...field.Expr) IUserStorageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserStorageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserStorageDo
	Group(cols ...field.Expr) IUserStorageDo
	Having(conds ...gen.Condition) IUserStorageDo
	Limit(limit int) IUserStorageDo
	Offset(offset int) IUserStorageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserStorageDo
	Unscoped() IUserStorageDo
	Create(values ...*entity.UserStorage) error
	CreateInBatches(values []*entity.UserStorage, batchSize int) error
	Save(values ...*entity.UserStorage) error
	First() (*entity.UserStorage, error)
	Take() (*entity.UserStorage, error)
	Last() (*entity.UserStorage, error)
	Find() ([]*entity.UserStorage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserStorage, err error)
	FindInBatches(result *[]*entity.UserStorage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.UserStorage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserStorageDo
	Assign(attrs ...field.AssignExpr) IUserStorageDo
	Joins(fields ...field.RelationField) IUserStorageDo
	Preload(fields ...field.RelationField) IUserStorageDo
	FirstOrInit() (*entity.UserStorage, error)
	FirstOrCreate() (*entity.UserStorage, error)
	FindByPage(offset int, limit int) (result []*entity.UserStorage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserStorageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userStorageDo) Debug() IUserStorageDo {
	return u.withDO(u.DO.Debug())
}

func (u userStorageDo) WithContext(ctx context.Context) IUserStorageDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userStorageDo) ReadDB() IUserStorageDo {
	return u.Clauses(dbresolver.Read)
}

func (u userStorageDo) WriteDB() IUserStorageDo {
	return u.Clauses(dbresolver.Write)
}

func (u userStorageDo) Session(config *gorm.Session) IUserStorageDo {
	return u.withDO(u.DO.Session(config))
}

func (u userStorageDo) Clauses(conds ...clause.Expression) IUserStorageDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userStorageDo) Returning(value interface{}, columns ...string) IUserStorageDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userStorageDo) Not(conds ...gen.Condition) IUserStorageDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userStorageDo) Or(conds ...gen.Condition) IUserStorageDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userStorageDo) Select(conds ...field.Expr) IUserStorageDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userStorageDo) Where(conds ...gen.Condition) IUserStorageDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userStorageDo) Order(conds ...field.Expr) IUserStorageDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userStorageDo) Distinct(cols ...field.Expr) IUserStorageDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userStorageDo) Omit(cols ...field.Expr) IUserStorageDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userStorageDo) Join(table schema.Tabler, on ...field.Expr) IUserStorageDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userStorageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserStorageDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userStorageDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserStorageDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userStorageDo) Group(cols ...field.Expr) IUserStorageDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userStorageDo) Having(conds ...gen.Condition) IUserStorageDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userStorageDo) Limit(limit int) IUserStorageDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userStorageDo) Offset(offset int) IUserStorageDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userStorageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserStorageDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userStorageDo) Unscoped() IUserStorageDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userStorageDo) Create(values ...*entity.UserStorage) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userStorageDo) CreateInBatches(values []*entity.UserStorage, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userStorageDo) Save(values ...*entity.UserStorage) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userStorageDo) First() (*entity.UserStorage, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserStorage), nil
	}
}

func (u userStorageDo) Take() (*entity.UserStorage, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserStorage), nil
	}
}

func (u userStorageDo) Last() (*entity.UserStorage, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserStorage), nil
	}
}

func (u userStorageDo) Find() ([]*entity.UserStorage, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserStorage), err
}

func (u userStorageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserStorage, err error) {
	buf := make([]*entity.UserStorage, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userStorageDo) FindInBatches(result *[]*entity.UserStorage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userStorageDo) Attrs(attrs ...field.AssignExpr) IUserStorageDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userStorageDo) Assign(attrs ...field.AssignExpr) IUserStorageDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userStorageDo) Joins(fields ...field.RelationField) IUserStorageDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userStorageDo) Preload(fields ...field.RelationField) IUserStorageDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userStorageDo) FirstOrInit() (*entity.UserStorage, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserStorage), nil
	}
}

func (u userStorageDo) FirstOrCreate() (*entity.UserStorage, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserStorage), nil
	}
}

func (u userStorageDo) FindByPage(offset int, limit int) (result []*entity.UserStorage, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userStorageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userStorageDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userStorageDo) Delete(models ...*entity.UserStorage) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userStorageDo) withDO(do gen.Dao) *userStorageDo {
	u.DO = *do.(*gen.DO)
	return u
}
